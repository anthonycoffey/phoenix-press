"use strict";(self.webpackChunkphoenix_press=self.webpackChunkphoenix_press||[]).push([[947],{4338:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 1609);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var html_react_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-react-parser */ 900);\n\nconst Alert = MaterialUI.Alert;\n\nconst Disclaimer = ({\n  index\n}) => {\n  return index === 0 && (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, LOCALIZED.DISCLAIMER_MESSAGE && (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Alert, {\n    severity: "info",\n    sx: {\n      padding: "1rem"\n    }\n  }, (0,html_react_parser__WEBPACK_IMPORTED_MODULE_1__["default"])(LOCALIZED.DISCLAIMER_MESSAGE)));\n};\n/* harmony default export */ __webpack_exports__["default"] = (Disclaimer);\n\n//# sourceURL=webpack://phoenix-press/./src/components/Disclaimer.jsx?')},4947:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ EmbedForm; }\n});\n\n// EXTERNAL MODULE: external "React"\nvar external_React_ = __webpack_require__(1609);\n;// ./src/utils/embed-form-data.js\nconst options = [{\n  name: \'full_name\',\n  type: \'row\',\n  title: \'Contact Information\',\n  label: \'Please enter your contact information.\',\n  inputs: [{\n    name: \'full_name\',\n    type: \'text\',\n    label: \'Enter your name\',\n    value: \'\',\n    optional: true\n  }]\n}, {\n  name: \'phone\',\n  inputs: [{\n    name: \'phone\',\n    type: \'tel\',\n    label: \'Enter your phone number\',\n    value: \'\',\n    optional: false\n  }, {\n    name: \'sms_consent\',\n    type: \'checkbox\',\n    label: \'Yes, send me SMS updates and notifications to keep me informed about my roadside service request.\',\n    value: false,\n    optional: true\n  }]\n}, {\n  name: \'service_time\',\n  type: \'row\',\n  title: \'When do you need service?\',\n  label: \'Please verify service date and time.\',\n  inputs: [{\n    value: \'\',\n    type: \'datetime\',\n    name: \'service_time\',\n    selected: \'\',\n    optional: false\n  }]\n}, {\n  name: \'location\',\n  type: \'row\',\n  title: \'Where is the vehicle located?\',\n  label: \'Please verify service location.\',\n  inputs: [{\n    name: \'location\',\n    type: \'geo\',\n    label: \'Search for your location\',\n    value: \'\',\n    obj: {},\n    optional: true\n  }]\n}, {\n  type: \'row\',\n  title: \'Vehicle Details\',\n  label: \'Year, Make, Model, and Color\',\n  inputs: [{\n    name: \'car_year\',\n    type: \'text\',\n    label: \'Year\',\n    value: \'\',\n    optional: true\n  }, {\n    name: \'car_make\',\n    type: \'text\',\n    label: \'Make\',\n    value: \'\',\n    optional: true\n  }, {\n    name: \'car_model\',\n    type: \'text\',\n    label: \'Model\',\n    value: \'\',\n    optional: true\n  }, {\n    name: \'car_color\',\n    type: \'text\',\n    label: \'Color\',\n    value: \'\',\n    optional: true\n  }]\n}, {\n  name: \'service_type\',\n  inputs: [{\n    value: [],\n    valueId: null,\n    type: \'select\',\n    name: \'service_type\',\n    optionsKey: \'serviceOptions\',\n    options: [],\n    optional: false\n  }]\n}, {\n  inputs: [{\n    name: \'notes\',\n    type: \'text\',\n    label: \'Additional Information\',\n    value: \'\',\n    optional: true\n  }]\n}];\n/* harmony default export */ var embed_form_data = (options);\n;// ./src/styles.css\n// extracted by mini-css-extract-plugin\n\n// EXTERNAL MODULE: ./src/components/Prompt.jsx\nvar Prompt = __webpack_require__(7229);\n// EXTERNAL MODULE: ./node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js\nvar LocalizationProvider = __webpack_require__(5737);\n// EXTERNAL MODULE: ./node_modules/@mui/x-date-pickers/DatePicker/DatePicker.js + 35 modules\nvar DatePicker = __webpack_require__(8014);\n// EXTERNAL MODULE: ./node_modules/@mui/x-date-pickers/TimePicker/TimePicker.js + 36 modules\nvar TimePicker = __webpack_require__(2687);\n// EXTERNAL MODULE: ./node_modules/@mui/x-date-pickers/AdapterDateFnsV3/AdapterDateFnsV3.js + 117 modules\nvar AdapterDateFnsV3 = __webpack_require__(8870);\n// EXTERNAL MODULE: ./src/state.js\nvar state = __webpack_require__(249);\n;// ./src/components/PhoneField.jsx\n\nconst TextField = MaterialUI.TextField;\nconst {\n  useContext,\n  useEffect\n} = React;\n\nfunction PhoneField({\n  input,\n  onChange\n}) {\n  console.log({\n    GlobalStateContext: state.GlobalStateContext\n  });\n  const {\n    errors,\n    setErrors\n  } = useContext(state.GlobalStateContext);\n  const formatPhoneNumber = value => {\n    const phoneNumber = value.replace(/\\D/g, "");\n    if (phoneNumber.length <= 3) {\n      return phoneNumber;\n    } else if (phoneNumber.length <= 6) {\n      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3)}`;\n    } else {\n      return `(${phoneNumber.slice(0, 3)}) ${phoneNumber.slice(3, 6)}-${phoneNumber.slice(6, 10)}`;\n    }\n  };\n\n  // Function to validate phone number\n  const validatePhoneNumber = value => {\n    const phoneNumber = value.replace(/\\D/g, "");\n    return phoneNumber.length !== 10 ? "Valid phone number is required." : "";\n  };\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    const formatted = formatPhoneNumber(value);\n    const errorMessage = validatePhoneNumber(formatted);\n    setErrors({\n      ...errors,\n      [input.name]: errorMessage\n    });\n    onChange({\n      target: {\n        name: "phone",\n        value: formatted\n      }\n    });\n  };\n  useEffect(() => {\n    const errorMessage = validatePhoneNumber(input.value);\n    setErrors({\n      ...errors,\n      [input.name]: errorMessage\n    });\n  }, [input.value, setErrors, errors, input.name]);\n  return (0,external_React_.createElement)(TextField, {\n    label: input.label,\n    name: input.name,\n    value: input.value,\n    onChange: handleInputChange,\n    fullWidth: true,\n    variant: "outlined",\n    margin: "normal",\n    type: "tel",\n    required: !input.optional,\n    error: !!errors[input.name],\n    helperText: errors[input.name]\n  });\n}\n// EXTERNAL MODULE: ./node_modules/@react-google-maps/api/dist/esm.js\nvar esm = __webpack_require__(1769);\n;// ./src/components/AddressAutoComplete.jsx\n\nconst {\n  useState,\n  useEffect: AddressAutoComplete_useEffect,\n  useRef,\n  useContext: AddressAutoComplete_useContext,\n  Suspense\n} = React;\n\nconst {\n  GlobalStateContext\n} = "../state.js";\nconst AddressAutoComplete_TextField = MaterialUI.TextField;\nconst LinearProgress = MaterialUI.LinearProgress;\nconst Stack = MaterialUI.Stack;\nconst Button = MaterialUI.Button;\nconst LocationOnIcon = (0,external_React_.createElement)("svg", {\n  className: "MuiSvgIcon-root MuiSvgIcon-fontSizeMedium css-1iirmgg",\n  focusable: "false",\n  "aria-hidden": "true",\n  viewBox: "0 0 24 24",\n  "data-testid": "MyLocationIcon"\n}, (0,external_React_.createElement)("path", {\n  d: "M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4m8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7"\n}));\nconst getAddressObject = address_components => {\n  const obj = {};\n  if (!address_components) return obj;\n  const number = address_components.find(c => c.types.includes("street_number"))?.long_name;\n  const street = address_components.find(c => c.types.includes("route"))?.short_name;\n  obj.address_1 = number && street ? `${number} ${street}` : "";\n  obj.city = address_components.find(c => c.types.includes("locality"))?.long_name || "";\n  obj.state = address_components.find(c => c.types.includes("administrative_area_level_1"))?.short_name || "";\n  obj.country = address_components.find(c => c.types.includes("country"))?.short_name || "";\n  obj.zipcode = address_components.find(c => c.types.includes("postal_code"))?.long_name || "";\n  return obj;\n};\nconst libraries = ["places"];\nfunction AddressAutoComplete({\n  input\n}) {\n  const {\n    questions,\n    currentQuestionIndex,\n    setQuestions,\n    errors,\n    setErrors\n  } = AddressAutoComplete_useContext(GlobalStateContext);\n  const [loadingLocation, setLoadingLocation] = useState(false);\n  const inputRef = useRef(null);\n  const {\n    isLoaded,\n    loadError\n  } = (0,esm.useLoadScript)({\n    googleMapsApiKey: LOCALIZED?.GMAPS_API_KEY,\n    libraries\n  });\n  AddressAutoComplete_useEffect(() => {\n    if (!inputRef.current || !window.google) return;\n    const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current);\n    const handlePlaceChanged = () => {\n      try {\n        const place = autocomplete.getPlace();\n        const addressObj = getAddressObject(place.address_components);\n        handleInputChange(addressObj);\n      } catch (error) {\n        console.error("Error handling place_changed event:", error);\n      }\n    };\n    autocomplete.addListener("place_changed", handlePlaceChanged);\n    return () => {\n      window.google.maps.event.clearInstanceListeners(autocomplete);\n    };\n  }, [isLoaded]);\n  const handleUseGps = () => {\n    if (!navigator.geolocation) {\n      console.error("Geolocation is not supported by your browser.");\n      return;\n    }\n    setLoadingLocation(true);\n    navigator.geolocation.getCurrentPosition(pos => {\n      const {\n        latitude,\n        longitude\n      } = pos.coords;\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        location: {\n          lat: latitude,\n          lng: longitude\n        }\n      }, (results, status) => {\n        setLoadingLocation(false);\n        if (status === "OK" && results[0]) {\n          const addressObj = getAddressObject(results[0].address_components);\n          handleInputChange(addressObj);\n        } else {\n          console.error("Geocoder failed due to:", status);\n        }\n      });\n    }, err => {\n      setLoadingLocation(false);\n      console.error("Error in getting geolocation:", err);\n    });\n  };\n  const handleInputChange = event => {\n    try {\n      const updatedQuestions = [...questions];\n      const currentInput = updatedQuestions[currentQuestionIndex].inputs.find(input => input.name === "location");\n      if (event.nativeEvent instanceof Event) {\n        currentInput.value = event.target.value;\n      } else {\n        currentInput.obj = event;\n        currentInput.value = `${event.address_1}, ${event.city}, ${event.state} ${event.zipcode}`;\n      }\n      setQuestions(updatedQuestions);\n      const errorMessage = validateLocation(currentInput);\n      setErrors({\n        ...errors,\n        [currentInput.name]: errorMessage\n      });\n    } catch (error) {\n      console.error("Error handling input change:", error);\n    }\n  };\n  const validateLocation = input => {\n    if (!input.optional) return !input.value.trim() ? "This field is required" : "";\n  };\n  if (loadError) {\n    console.error("Error loading maps:", loadError);\n    return (0,external_React_.createElement)("div", null, "Error loading maps");\n  }\n  if (!isLoaded) {\n    return (0,external_React_.createElement)(LinearProgress, null);\n  }\n  return (0,external_React_.createElement)(Suspense, {\n    fallback: (0,external_React_.createElement)(LinearProgress, null)\n  }, (0,external_React_.createElement)(Stack, {\n    spacing: 2,\n    direction: "column",\n    sx: {\n      marginTop: "1rem"\n    }\n  }, (0,external_React_.createElement)(AddressAutoComplete_TextField, {\n    label: input.label,\n    name: input.name,\n    value: input.value,\n    onChange: handleInputChange,\n    variant: "outlined",\n    margin: "normal",\n    fullWidth: true,\n    inputRef: inputRef,\n    InputProps: {\n      endAdornment: loadingLocation ? (0,external_React_.createElement)(LinearProgress, null) : null\n    },\n    required: !input.optional,\n    error: !!errors[input.name],\n    helperText: errors[input.name]\n  }), (0,external_React_.createElement)(Button, {\n    variant: "contained",\n    "aria-label": "Use my location",\n    color: "primary",\n    onClick: handleUseGps,\n    disabled: loadingLocation\n  }, loadingLocation ? (0,external_React_.createElement)(LinearProgress, null) : (0,external_React_.createElement)(LocationOnIcon, null), "Use My Current Location")));\n}\n;// ./src/components/ServiceSelect.jsx\n\nconst FormControl = MaterialUI.FormControl;\nconst FormControlLabel = MaterialUI.FormControlLabel;\nconst FormGroup = MaterialUI.FormGroup;\nconst Checkbox = MaterialUI.Checkbox;\nconst Box = MaterialUI.Box;\nconst FormHelperText = MaterialUI.FormHelperText;\nconst FormLabel = MaterialUI.FormLabel;\nconst {\n  useContext: ServiceSelect_useContext,\n  useEffect: ServiceSelect_useEffect,\n  useState: ServiceSelect_useState\n} = React;\n\nfunction ServiceSelect({\n  input\n}) {\n  const {\n    questions,\n    currentQuestionIndex,\n    setQuestions,\n    services,\n    errors,\n    setErrors\n  } = ServiceSelect_useContext(state.GlobalStateContext);\n  const [selectedServices, setSelectedServices] = ServiceSelect_useState([]);\n  const handleCheckboxChange = event => {\n    const {\n      value,\n      checked\n    } = event.target;\n    setSelectedServices(prev => checked ? [...prev, value] : prev.filter(service => service !== value));\n  };\n  ServiceSelect_useEffect(() => {\n    const updatedQuestions = [...questions];\n    const currentInput = updatedQuestions[currentQuestionIndex].inputs.find(input => input.name === "service_type");\n    const matchedServices = services.filter(service => selectedServices.includes(service.value));\n    currentInput.value = matchedServices.map(service => ({\n      value: service.value,\n      id: service.id\n    }));\n    setQuestions(updatedQuestions);\n    const errorMessage = validateSelection(currentInput);\n    setErrors({\n      ...errors,\n      [currentInput.name]: errorMessage\n    });\n  }, [selectedServices]);\n  const validateSelection = input => {\n    if (!input.optional) return input.value.length < 1 ? "This field is required" : "";\n  };\n  return (0,external_React_.createElement)(FormControl, {\n    component: "fieldset",\n    fullWidth: true,\n    margin: "dense",\n    error: errors["service_type"]\n  }, (0,external_React_.createElement)(FormLabel, {\n    component: "legend"\n  }, "Select desired service(s)"), (0,external_React_.createElement)(FormGroup, null, (0,external_React_.createElement)(Box, {\n    sx: {\n      display: "grid",\n      gridTemplateColumns: "repeat(2, 1fr)",\n      gap: 1,\n      padding: 0\n    }\n  }, services.map(service => (0,external_React_.createElement)(FormControlLabel, {\n    sx: {\n      margin: 0\n    },\n    control: (0,external_React_.createElement)(Checkbox, {\n      value: service.value,\n      checked: selectedServices.includes(service.value),\n      onChange: handleCheckboxChange,\n      name: service.name,\n      size: "small"\n    }),\n    label: service.text\n  })))), (0,external_React_.createElement)(FormHelperText, null, errors["service_type"]));\n}\n// EXTERNAL MODULE: ./node_modules/html-react-parser/esm/index.mjs\nvar html_react_parser_esm = __webpack_require__(900);\n;// ./src/components/InputField.jsx\n\nconst {\n  useEffect: InputField_useEffect\n} = React;\n\n\n\n\n\nconst InputField_TextField = MaterialUI.TextField;\nconst InputField_FormControlLabel = MaterialUI.FormControlLabel;\nconst InputField_Checkbox = MaterialUI.Checkbox;\nconst InputField_Stack = MaterialUI.Stack;\n\nconst InputField = ({\n  input,\n  handleTextChange,\n  handleDateChange,\n  handleConsentChange,\n  selectedDate,\n  setValidPhoneNumber,\n  checked,\n  handleBlur\n}) => {\n  InputField_useEffect(() => {\n    if (input.type === "datetime") {\n      handleDateChange({\n        input,\n        event: selectedDate\n      });\n    }\n    return () => {\n      // Cleanup if necessary\n    };\n  }, [input, selectedDate, handleDateChange]);\n  switch (input.type) {\n    case "tel":\n      return (0,external_React_.createElement)(PhoneField, {\n        input: input,\n        setValidPhoneNumber: setValidPhoneNumber,\n        handleBlur: handleBlur\n      });\n    case "text":\n      return (0,external_React_.createElement)(InputField_TextField, {\n        label: input.label,\n        name: input.name,\n        onChange: event => handleTextChange({\n          input,\n          event\n        }),\n        onBlur: handleBlur,\n        fullWidth: true,\n        variant: "outlined",\n        margin: "normal",\n        required: !input.optional\n      });\n    case "geo":\n      return (0,external_React_.createElement)(AddressAutoComplete, {\n        input: input,\n        handleBlur: handleBlur\n      });\n    case "select":\n      return (0,external_React_.createElement)(ServiceSelect, {\n        input: input,\n        handleBlur: handleBlur\n      });\n    case "checkbox":\n      return (0,external_React_.createElement)(InputField_FormControlLabel, {\n        sx: {\n          marginBottom: "1rem"\n        },\n        control: (0,external_React_.createElement)(InputField_Checkbox, {\n          checked: checked,\n          onChange: event => handleConsentChange({\n            input,\n            event\n          }),\n          onBlur: handleBlur,\n          name: input.name,\n          required: !input.optional\n        }),\n        label: (0,html_react_parser_esm["default"])(LOCALIZED.SMS_CONSENT_MESSAGE || input.label)\n      });\n    case "datetime":\n      return (0,external_React_.createElement)(LocalizationProvider.LocalizationProvider, {\n        dateAdapter: AdapterDateFnsV3.AdapterDateFns\n      }, (0,external_React_.createElement)(InputField_Stack, {\n        direction: "row",\n        spacing: 4,\n        sx: {\n          marginTop: "1rem",\n          justifyContent: "space-around",\n          width: "100%"\n        }\n      }, (0,external_React_.createElement)(DatePicker.DatePicker, {\n        label: "Select Date",\n        value: selectedDate,\n        onChange: event => handleDateChange({\n          input,\n          event\n        }),\n        onAccept: handleBlur,\n        disablePast: true,\n        fullWidth: true\n      }), (0,external_React_.createElement)(TimePicker.TimePicker, {\n        label: "Select Time",\n        value: selectedDate,\n        onChange: event => handleDateChange({\n          input,\n          event\n        }),\n        onAccept: handleBlur,\n        fullWidth: true\n      })));\n    default:\n      return null;\n  }\n};\n/* harmony default export */ var components_InputField = (InputField);\n// EXTERNAL MODULE: ./src/components/Disclaimer.jsx\nvar Disclaimer = __webpack_require__(4338);\n;// ./src/components/EmbedForm.jsx\n\nconst {\n  useEffect: EmbedForm_useEffect,\n  useState: EmbedForm_useState,\n  Suspense: EmbedForm_Suspense\n} = React;\n\n\nconst {\n  requiredFields,\n  isSubmissionComplete\n} = "../utils/validation";\nconst EmbedForm_Box = MaterialUI.Box;\nconst EmbedForm_Button = MaterialUI.Button;\nconst Card = MaterialUI.Card;\nconst CardContent = MaterialUI.CardContent;\nconst CardActions = MaterialUI.CardActions;\nconst EmbedForm_Stack = MaterialUI.Stack;\nconst Typography = MaterialUI.Typography;\nconst EmbedForm_LinearProgress = MaterialUI.LinearProgress;\nconst CardHeader = MaterialUI.CardHeader;\n\n\n\n\nfunction EmbedForm() {\n  const [questions] = EmbedForm_useState(embed_form_data || false);\n  const [validPhoneNumber, setValidPhoneNumber] = EmbedForm_useState(false);\n  const [loading, setLoading] = EmbedForm_useState(false);\n  const [submitted, setSubmitted] = EmbedForm_useState(false);\n  const [formStarted, setFormStarted] = EmbedForm_useState(false);\n  const [formSubmissionId, setFormSubmissionId] = EmbedForm_useState(null);\n  const [selectedDate, setSelectedDate] = EmbedForm_useState(new Date());\n  const [checked, setChecked] = EmbedForm_useState(false);\n  const [turnstileToken, setTurnstileToken] = EmbedForm_useState(null);\n  EmbedForm_useEffect(() => {\n    let id;\n    if (window.turnstile) {\n      id = window.turnstile.render("#turnstile-widget", {\n        sitekey: LOCALIZED.TURNSTILE_SITE_KEY,\n        callback: token => {\n          setTurnstileToken(token);\n        },\n        "expired-callback": () => {\n          window.turnstile.reset(id);\n        }\n      });\n    }\n    return () => {\n      if (id) {\n        window.turnstile.remove(id);\n      }\n    };\n  }, []);\n  const handleSubmit = async (submit = false) => {\n    if (!turnstileToken && !validPhoneNumber) return false;\n    setLoading(true);\n    const submission = questions.flatMap(question => question.inputs.map(input => {\n      const {\n        name,\n        value,\n        obj\n      } = input;\n      return obj ? {\n        name,\n        value,\n        obj\n      } : {\n        name,\n        value\n      };\n    }));\n    const headers = {\n      "Content-Type": "application/json",\n      "X-Turnstile-Token": turnstileToken\n    };\n    const source = window.location.origin.replace(/^https?:\\/\\//, "") + window.location.pathname.replace(/\\/$/, "");\n    try {\n      const completed = isSubmissionComplete(submission, requiredFields);\n      if (formSubmissionId) {\n        await fetch(`${LOCALIZED.API_URL}/submit-lead-form/${formSubmissionId}`, {\n          method: "PUT",\n          headers,\n          body: JSON.stringify({\n            submission,\n            source,\n            completed\n          })\n        });\n      } else {\n        if (!formStarted) {\n          setFormStarted(true);\n          if (window?.dataLayer) {\n            window.dataLayer.push({\n              event: "form_start"\n            });\n          }\n        }\n        const response = await fetch(`${LOCALIZED.API_URL}/submit-lead-form`, {\n          method: "POST",\n          headers,\n          body: JSON.stringify({\n            submission,\n            source,\n            completed\n          })\n        });\n        const result = await response.json();\n        if (result?.id) {\n          setFormSubmissionId(result?.id);\n        }\n      }\n      if (submit) {\n        setSubmitted(true);\n      }\n    } catch (error) {\n      console.error("There was an error", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleTextChange = ({\n    input,\n    event\n  }) => {\n    input.value = event?.target?.value;\n  };\n  const handleDateChange = ({\n    input,\n    event\n  }) => {\n    input.value = event;\n    setSelectedDate(event);\n  };\n  const handleBlur = (submit = false) => {\n    if (validPhoneNumber && turnstileToken) {\n      void handleSubmit(submit);\n    } else {\n      return false;\n    }\n  };\n  const handleConsentChange = ({\n    input,\n    event\n  }) => {\n    const {\n      checked\n    } = event?.target;\n    input.value = checked;\n    setChecked(checked);\n    handleBlur();\n  };\n  return (0,external_React_.createElement)("section", null, (0,external_React_.createElement)(EmbedForm_Suspense, {\n    fallback: (0,external_React_.createElement)(EmbedForm_LinearProgress, null)\n  }, (0,external_React_.createElement)(Card, {\n    className: "phoenix-form"\n  }, LOCALIZED.FORM_TITLE && (0,external_React_.createElement)(CardHeader, {\n    title: LOCALIZED.FORM_TITLE,\n    subheader: LOCALIZED.FORM_SUBTITLE\n  }), submitted ? (0,external_React_.createElement)(CardContent, null, (0,external_React_.createElement)(EmbedForm_Stack, {\n    space: 2\n  }, (0,external_React_.createElement)(Prompt["default"], {\n    question: {\n      prompt: LOCALIZED.SUBMISSION_MESSAGE\n    }\n  }))) : (0,external_React_.createElement)("form", {\n    "aria-label": "Form Description",\n    autoComplete: "on",\n    noValidate: true\n  }, (0,external_React_.createElement)(CardContent, null, (0,external_React_.createElement)(EmbedForm_Stack, {\n    space: 4\n  }, questions?.map((question, index) => (0,external_React_.createElement)(React.Fragment, {\n    key: index\n  }, question.type === "row" ? (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(Typography, {\n    variant: "subtitle1",\n    sx: {\n      mt: "1rem"\n    },\n    color: "textSecondary"\n  }, question.title, (0,external_React_.createElement)(Typography, {\n    variant: "subtitle2",\n    color: "textSecondary"\n  }, question.label)), (0,external_React_.createElement)(EmbedForm_Box, {\n    display: "flex",\n    flexDirection: "row",\n    sx: {\n      width: "100%"\n    },\n    gap: 2\n  }, question.inputs.map((input, index) => (0,external_React_.createElement)(components_InputField, {\n    key: index,\n    input: input,\n    handleTextChange: handleTextChange,\n    handleDateChange: handleDateChange,\n    handleConsentChange: handleConsentChange,\n    selectedDate: selectedDate,\n    setValidPhoneNumber: setValidPhoneNumber,\n    checked: checked,\n    setChecked: setChecked,\n    handleBlur: handleBlur\n  })))) : question.inputs.map((input, index) => (0,external_React_.createElement)(components_InputField, {\n    key: index,\n    input: input,\n    handleTextChange: handleTextChange,\n    handleDateChange: handleDateChange,\n    handleConsentChange: handleConsentChange,\n    selectedDate: selectedDate,\n    setValidPhoneNumber: setValidPhoneNumber,\n    checked: checked,\n    setChecked: setChecked,\n    handleBlur: handleBlur\n  }))))), (0,external_React_.createElement)(EmbedForm_Box, null, (0,external_React_.createElement)(Disclaimer["default"], {\n    index: 0\n  })), loading && (0,external_React_.createElement)(EmbedForm_LinearProgress, null)), (0,external_React_.createElement)(CardActions, {\n    sx: {\n      justifyContent: "end"\n    }\n  }, (0,external_React_.createElement)(EmbedForm_Button, {\n    size: "large",\n    variant: "contained",\n    color: "primary",\n    onClick: () => {\n      void handleBlur(true);\n    },\n    disabled: loading || !validPhoneNumber || !turnstileToken\n  }, "Submit")), (0,external_React_.createElement)("div", {\n    id: "turnstile-widget",\n    className: "cf-turnstile",\n    style: {\n      display: "flex",\n      justifyContent: "center",\n      margin: "1rem 0",\n      padding: "1rem"\n    },\n    "data-sitekey": LOCALIZED.TURNSTILE_SITE_KEY\n  })))));\n}\n\n//# sourceURL=webpack://phoenix-press/./src/components/EmbedForm.jsx_+_6_modules?')},7229:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ 1609);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var html_react_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-react-parser */ 900);\n\nconst Avatar = MaterialUI.Avatar;\nconst Stack = MaterialUI.Stack;\n\nconst Prompt = ({\n  question\n}) => {\n  var _LOCALIZED$ASSETS_URL;\n  const assets = (_LOCALIZED$ASSETS_URL = LOCALIZED?.ASSETS_URL) !== null && _LOCALIZED$ASSETS_URL !== void 0 ? _LOCALIZED$ASSETS_URL : "";\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Stack, {\n    direction: "row",\n    spacing: 2,\n    alignItems: "flex-start"\n  }, (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Avatar, {\n    src: `${assets}/avatar.jpg`,\n    alt: "Technician Avatar"\n  }), (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(SpeechBubble, null, (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)("label", null, (0,html_react_parser__WEBPACK_IMPORTED_MODULE_1__["default"])(question.prompt))));\n};\n/* harmony default export */ __webpack_exports__["default"] = (Prompt);\n\n//# sourceURL=webpack://phoenix-press/./src/components/Prompt.jsx?')}}]);