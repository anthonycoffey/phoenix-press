{"version":3,"file":"62.d545ad3c16e5d11f0c33.js","mappings":"4UAEO,SAASA,EAA2BC,GACzC,OAAO,EAAAC,EAAA,IAAqB,iBAAkBD,EAChD,EAC2B,EAAAE,EAAA,GAAuB,iBAAkB,CAAC,OAAQ,YAC7E,I,UCFA,MAAMC,EAAY,CAAC,iBAAkB,aAmB/BC,GAAkB,EAAAC,EAAA,IAAO,MAAO,CACpCC,KAAM,iBACNN,KAAM,OACNO,kBAAmB,CAACC,EAAOC,KACzB,MAAM,WACJC,GACEF,EACJ,MAAO,CAACC,EAAOE,MAAOD,EAAWE,gBAAkBH,EAAOI,QAAQ,GAP9C,EASrB,EACDH,iBACI,OAAS,CACbI,QAAS,OACTC,WAAY,SACZC,QAAS,IACPN,EAAWE,gBAAkB,CAC/B,gCAAiC,CAC/BK,WAAY,OAkDhB,MA/CiC,cAAiB,SAAqBC,EAASC,GAC9E,MAAMX,GAAQ,OAAgB,CAC5BA,MAAOU,EACPZ,KAAM,oBAEF,eACFM,GAAiB,EAAK,UACtBQ,GACEZ,EACJa,GAAQ,OAA8Bb,EAAOL,GACzCO,GAAa,OAAS,CAAC,EAAGF,EAAO,CACrCI,mBAEIU,EA3CkBZ,KACxB,MAAM,QACJY,EAAO,eACPV,GACEF,EACEa,EAAQ,CACZZ,KAAM,CAAC,QAASC,GAAkB,YAEpC,OAAO,EAAAY,EAAA,GAAeD,EAAOxB,EAA4BuB,EAAQ,EAmCjDG,CAAkBf,GAClC,OAAoB,SAAKN,GAAiB,OAAS,CACjDgB,WAAW,EAAAM,EAAA,GAAKJ,EAAQX,KAAMS,GAC9BV,WAAYA,EACZS,IAAKA,GACJE,GACL,I,UCkEA,EAhIgB,CACf,CACCf,KAAM,YACNqB,KAAM,MACNC,MAAO,sBACPC,MAAO,yCACPC,OAAQ,CACP,CACCxB,KAAM,YACNqB,KAAM,OACNE,MAAO,kBACPE,MAAO,GACPC,UAAU,KAIb,CACC1B,KAAM,QACNwB,OAAQ,CACP,CACCxB,KAAM,QACNqB,KAAM,MACNE,MAAO,0BACPE,MAAO,GACPC,UAAU,GAEX,CACC1B,KAAM,cACNqB,KAAM,WACNE,MAAO,oGACPE,OAAO,EACPC,UAAU,KAIb,CACC1B,KAAM,eACNqB,KAAM,MACNC,MAAO,4BACPC,MAAO,uCACPC,OAAQ,CACP,CACCC,MAAO,GACPJ,KAAM,WACNrB,KAAM,eACN2B,SAAU,GACVD,UAAU,KAIb,CACC1B,KAAM,WACNqB,KAAM,MACNC,MAAO,gCACPC,MAAO,kCACPC,OAAQ,CACP,CACCxB,KAAM,WACNqB,KAAM,MACNE,MAAO,2BACPE,MAAO,GACPG,IAAK,CAAC,EACNF,UAAU,KAIb,CACCL,KAAM,MACNC,MAAO,kBACPC,MAAO,+BACPC,OAAQ,CACP,CACCxB,KAAM,WACNqB,KAAM,OACNE,MAAO,OACPE,MAAO,GACPC,UAAU,GAEX,CACC1B,KAAM,WACNqB,KAAM,OACNE,MAAO,OACPE,MAAO,GACPC,UAAU,GAEX,CACC1B,KAAM,YACNqB,KAAM,OACNE,MAAO,QACPE,MAAO,GACPC,UAAU,GAEX,CACC1B,KAAM,YACNqB,KAAM,OACNE,MAAO,QACPE,MAAO,GACPC,UAAU,KAIb,CACC1B,KAAM,eACNwB,OAAQ,CACP,CACCC,MAAO,GACPI,QAAS,KACTR,KAAM,SACNrB,KAAM,eACN8B,WAAY,iBACZC,QAAS,GACTL,UAAU,KAIb,CACCF,OAAQ,CACP,CACCxB,KAAM,QACNqB,KAAM,OACNE,MAAO,yBACPE,MAAO,GACPC,UAAU,MC1Hd,MAAMM,EAAiB,CACtB,YACA,QACA,eACA,WACA,gBAQKC,EAAuBA,CAACC,EAAYF,IAClCA,EAAeG,OAAOC,GANRC,EAACD,EAAOF,KAC7B,MAAMI,EAAYJ,EAAWK,MAAMC,GAASA,EAAKxC,OAASoC,IAC1D,OAAOE,GAAaG,EAAgBL,GAAOE,EAAUb,MAAM,EAIpBY,CAAcD,EAAOF,KAGvDO,EAAkB,CACvBC,UAAYjB,GACa,KAAjBA,EAAMkB,OAEdC,MAAQnB,GACiB,KAAjBA,EAAMkB,OAEdE,aAAepB,IACNqB,MAAM,IAAIC,KAAKtB,GAAOuB,WAE/BC,SAAWxB,GACc,KAAjBA,EAAMkB,OAEdO,aAAezB,GACP0B,MAAMC,QAAQ3B,IAAUA,EAAM4B,OAAS,GCd1CC,GAASC,EAAAA,EAAAA,OAAK,IAAM,yCACpBC,GAAaD,EAAAA,EAAAA,OAAK,IAAM,gCACxBE,GAAaF,EAAAA,EAAAA,OAAK,IAAM,wCAEf,SAASG,IACtB,MAAOC,IAAaC,EAAAA,EAAAA,UAASC,IAAgB,IACtCC,EAAkBC,IAAuBH,EAAAA,EAAAA,WAAS,IAClDI,EAASC,IAAcL,EAAAA,EAAAA,WAAS,IAChCM,EAAWC,IAAgBP,EAAAA,EAAAA,WAAS,IACpCQ,EAAaC,IAAkBT,EAAAA,EAAAA,WAAS,IACxCU,EAAkBC,IAAuBX,EAAAA,EAAAA,UAAS,OAClDY,EAAcC,IAAmBb,EAAAA,EAAAA,UAAS,IAAIb,OAC9C2B,EAASC,IAAcf,EAAAA,EAAAA,WAAS,IAChCgB,EAAgBC,IAAqBjB,EAAAA,EAAAA,UAAS,OAErDkB,EAAAA,EAAAA,YAAU,KACR,GAAIC,OAAOC,UAAW,CACpB,MAAMC,EAAKF,OAAOC,UAAUE,OAAO,oBAAqB,CACtDC,QAASC,UAAUC,mBACnBC,SAAWC,IACTV,EAAkBU,EAAM,EAE1B,mBAAoBC,KAClBT,OAAOC,UAAUS,MAAMR,EAAG,GAGhC,IACC,IAEH,MAkEMS,EAAmBA,EAAGC,QAAOC,YACjCD,EAAMlE,MAAQmE,GAAOC,QAAQpE,KAAK,EAG9BqE,EAAmBA,EAAGH,QAAOC,YACjCD,EAAMlE,MAAQmE,EACdnB,EAAgBmB,EAAM,EAGlBG,EAAaA,CAACC,GAAS,KAC3B,IAAIlC,IAAoBc,EAGtB,OAAO,EA/EUqB,OAAOD,GAAS,KACnC,IAAKpB,IAAmBd,EAAkB,OAAO,EAEjDG,GAAW,GACX,MAAM/B,EAAayB,EAAUuC,SAASC,GACpCA,EAAS3E,OAAO4E,KAAKT,IACnB,MAAM,KAAE3F,EAAI,MAAEyB,EAAK,IAAEG,GAAQ+D,EAC7B,OAAO/D,EAAM,CAAE5B,OAAMyB,QAAOG,OAAQ,CAAE5B,OAAMyB,QAAO,MAIjD4E,EAAU,CACd,eAAgB,mBAChB,oBAAqBzB,GAGjB0B,EACJvB,OAAO9B,SAASsD,OAAOC,QAAQ,eAAgB,IAC/CzB,OAAO9B,SAASwD,SAASD,QAAQ,MAAO,IAE1C,IAAK5B,EAAgB,OAAO,EAE5B,IACE,MAAM8B,EAAYzE,EAAqBC,EAAYF,GAEnD,GAAIsC,QACIqC,MACJ,GAAGvB,UAAUwB,4BAA4BtC,IACzC,CACEuC,OAAQ,MACRR,UACAS,KAAMC,KAAKC,UAAU,CAAE9E,aAAYoE,SAAQI,oBAG1C,CACAtC,IACHC,GAAe,GACXU,QAAQkC,WACVlC,OAAOkC,UAAUC,KAAK,CACpBtB,MAAO,gBAKb,MAAMuB,QAAiBR,MAAM,GAAGvB,UAAUwB,2BAA4B,CACpEC,OAAQ,OACRR,UACAS,KAAMC,KAAKC,UAAU,CAAE9E,aAAYoE,SAAQI,gBAGvCU,QAAeD,EAASE,OAC1BD,GAAQnC,IACVV,EAAoB6C,GAAQnC,GAEhC,CAEIe,GACF7B,GAAa,EAEjB,CAAE,MAAOmD,GACPC,QAAQD,MAAM,qBAAsBA,EACtC,CAAE,QACArD,GAAW,EACb,GAcOuD,CAAaxB,EAGpB,EAGIyB,EAAsBA,EAAG9B,QAAOC,YACpC,MAAM,QAAElB,GAAYkB,GAAOC,OAC3BF,EAAMlE,MAAQiD,EACdC,EAAWD,GACXqB,GAAY,EAGd,OACE2B,IAAAA,cAAA,eACEA,IAAAA,cAACC,EAAAA,EAAI,CAAC7G,UAAU,gBACbsE,UAAUwC,YACTF,IAAAA,cAACG,EAAAA,EAAU,CACTvG,MAAO8D,UAAUwC,WACjBE,UAAW1C,UAAU2C,gBAGxB7D,GACCwD,IAAAA,cAACM,EAAAA,EAAW,KACVN,IAAAA,cAACO,EAAAA,EAAK,CAACC,MAAO,GACZR,IAAAA,cAACpE,EAAM,CACL6C,SAAU,CACRgC,OAAQ/C,UAAUgD,yBAO1BlE,GACAwD,IAAAA,cAAA,QAAM,aAAW,mBAAmBW,aAAa,KAAKC,YAAU,GAC9DZ,IAAAA,cAACM,EAAAA,EAAW,KACVN,IAAAA,cAACO,EAAAA,EAAK,CAACC,MAAO,GACXvE,GAAWyC,KAAI,CAACD,EAAUoC,IACH,QAAlBpC,EAAS9E,KAETqG,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAACc,EAAAA,EAAU,CACTC,QAAQ,YACRC,GAAI,CAAEC,GAAI,QACVC,MAAM,iBAELzC,EAAS7E,MACVoG,IAAAA,cAACc,EAAAA,EAAU,CAACC,QAAQ,YAAYG,MAAM,iBACnCzC,EAAS5E,QAIdmG,IAAAA,cAACmB,EAAAA,EAAG,CACFC,IAAKP,EACL/H,QAAQ,OACRuI,cAAc,MACdL,GAAI,CAAEM,MAAO,QACbC,IAAK,GAEJ9C,EAAS3E,OAAO4E,KAAI,CAACT,EAAO4C,IAC3Bb,IAAAA,cAAClE,EAAU,CACTsF,IAAKP,EACL5C,MAAOA,EACPD,iBAAkBA,EAClBI,iBAAkBA,EAClB2B,oBAAqBA,EACrBjD,aAAcA,EACdT,oBAAqBA,EACrBW,QAASA,EACTC,WAAYA,EACZoB,WAAYA,QAOfI,EAAS3E,OAAO4E,KAAI,CAACT,EAAO4C,IACjCb,IAAAA,cAAClE,EAAU,CACTsF,IAAKP,EACL5C,MAAOA,EACPD,iBAAkBA,EAClBI,iBAAkBA,EAClB2B,oBAAqBA,EACrBjD,aAAcA,EACdT,oBAAqBA,EACrBW,QAASA,EACTC,WAAYA,EACZoB,WAAYA,SAMtB2B,IAAAA,cAACmB,EAAAA,EAAG,KACFnB,IAAAA,cAACjE,EAAU,CAAC8E,MAAO,KAErBb,IAAAA,cAAA,OACEzC,GAAG,mBACHnE,UAAU,eACVoI,MAAO,CACL1I,QAAS,OACT2I,eAAgB,SAChBC,OAAQ,SACR1I,QAAS,QAEX,eAAc0E,UAAUC,qBAE1BqC,IAAAA,cAAAA,IAAAA,SAAA,KAAG1D,GAAW0D,IAAAA,cAAC2B,EAAAA,EAAc,QAG/B3B,IAAAA,cAAC4B,EAAW,CAACZ,GAAI,CAAES,eAAgB,QACjCzB,IAAAA,cAAC6B,EAAAA,EAAM,CACLd,QAAQ,YACRG,MAAM,UACNY,QAASA,KACFzD,GAAW,EAAK,EAEvB0D,SAAUzF,IAAYF,IAAqBc,GAC5C,aASf,C","sources":["webpack://phoenix-press/./node_modules/@mui/material/CardActions/cardActionsClasses.js","webpack://phoenix-press/./node_modules/@mui/material/CardActions/CardActions.js","webpack://phoenix-press/./src/utils/embed-form-data.js","webpack://phoenix-press/./src/utils/validation.js","webpack://phoenix-press/./src/components/EmbedForm.jsx"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActions', slot);\n}\nconst cardActionsClasses = generateUtilityClasses('MuiCardActions', ['root', 'spacing']);\nexport default cardActionsClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"disableSpacing\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport { useDefaultProps } from '../DefaultPropsProvider';\nimport { getCardActionsUtilityClass } from './cardActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getCardActionsUtilityClass, classes);\n};\nconst CardActionsRoot = styled('div', {\n  name: 'MuiCardActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8\n}, !ownerState.disableSpacing && {\n  '& > :not(style) ~ :not(style)': {\n    marginLeft: 8\n  }\n}));\nconst CardActions = /*#__PURE__*/React.forwardRef(function CardActions(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCardActions'\n  });\n  const {\n      disableSpacing = false,\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActions;","const options = [\n\t{\n\t\tname: 'full_name',\n\t\ttype: 'row',\n\t\ttitle: 'Contact Information',\n\t\tlabel: 'Please enter your contact information.',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'full_name',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Enter your name',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'phone',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'phone',\n\t\t\t\ttype: 'tel',\n\t\t\t\tlabel: 'Enter your phone number',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'sms_consent',\n\t\t\t\ttype: 'checkbox',\n\t\t\t\tlabel: 'Yes, send me SMS updates and notifications to keep me informed about my roadside service request.',\n\t\t\t\tvalue: false,\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'service_time',\n\t\ttype: 'row',\n\t\ttitle: 'When do you need service?',\n\t\tlabel: 'Please verify service date and time.',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tvalue: '',\n\t\t\t\ttype: 'datetime',\n\t\t\t\tname: 'service_time',\n\t\t\t\tselected: '',\n\t\t\t\toptional: false,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'location',\n\t\ttype: 'row',\n\t\ttitle: 'Where is the vehicle located?',\n\t\tlabel: 'Please verify service location.',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'location',\n\t\t\t\ttype: 'geo',\n\t\t\t\tlabel: 'Search for your location',\n\t\t\t\tvalue: '',\n\t\t\t\tobj: {},\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\ttype: 'row',\n\t\ttitle: 'Vehicle Details',\n\t\tlabel: 'Year, Make, Model, and Color',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'car_year',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Year',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'car_make',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Make',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'car_model',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Model',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'car_color',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Color',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tname: 'service_type',\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tvalue: [],\n\t\t\t\tvalueId: null,\n\t\t\t\ttype: 'select',\n\t\t\t\tname: 'service_type',\n\t\t\t\toptionsKey: 'serviceOptions',\n\t\t\t\toptions: [],\n\t\t\t\toptional: false,\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'notes',\n\t\t\t\ttype: 'text',\n\t\t\t\tlabel: 'Additional Information',\n\t\t\t\tvalue: '',\n\t\t\t\toptional: true,\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport default options;\n","const requiredFields = [\n\t'full_name',\n\t'phone',\n\t'service_time',\n\t'location',\n\t'service_type',\n];\n\nconst validateField = (field, submission) => {\n\tconst fieldData = submission.find((item) => item.name === field);\n\treturn fieldData && validationRules[field](fieldData.value);\n};\n\nconst isSubmissionComplete = (submission, requiredFields) => {\n\treturn requiredFields.every((field) => validateField(field, submission));\n};\n\nconst validationRules = {\n\tfull_name: (value) => {\n\t\treturn value.trim() !== '';\n\t},\n\tphone: (value) => {\n\t\treturn value.trim() !== '';\n\t},\n\tservice_time: (value) => {\n\t\treturn !isNaN(new Date(value).getTime());\n\t},\n\tlocation: (value) => {\n\t\treturn value.trim() !== '';\n\t},\n\tservice_type: (value) => {\n\t\treturn Array.isArray(value) && value.length > 0;\n\t},\n};\n\nexport { requiredFields, validateField, isSubmissionComplete, validationRules };\n","import React, { useEffect, useState, lazy, Suspense } from \"react\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  Stack,\n  Typography,\n  LinearProgress,\n  CardHeader,\n} from \"@mui/material\";\nimport questionData from \"../utils/embed-form-data\";\nimport \"../styles.css\";\nimport { requiredFields, isSubmissionComplete } from \"../utils/validation\";\n\n// Lazy load components\nconst Prompt = lazy(() => import(\"./Prompt\"));\nconst InputField = lazy(() => import(\"./InputField\"));\nconst Disclaimer = lazy(() => import(\"./Disclaimer\"));\n\nexport default function EmbedForm() {\n  const [questions] = useState(questionData || false);\n  const [validPhoneNumber, setValidPhoneNumber] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [formStarted, setFormStarted] = useState(false);\n  const [formSubmissionId, setFormSubmissionId] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [checked, setChecked] = useState(false);\n  const [turnstileToken, setTurnstileToken] = useState(null);\n\n  useEffect(() => {\n    if (window.turnstile) {\n      const id = window.turnstile.render(\"#turnstile-widget\", {\n        sitekey: LOCALIZED.TURNSTILE_SITE_KEY,\n        callback: (token) => {\n          setTurnstileToken(token);\n        },\n        \"expired-callback\": () => {\n          window.turnstile.reset(id);\n        },\n      });\n    }\n  }, []);\n\n  const handleSubmit = async (submit = false) => {\n    if (!turnstileToken && !validPhoneNumber) return false;\n\n    setLoading(true);\n    const submission = questions.flatMap((question) =>\n      question.inputs.map((input) => {\n        const { name, value, obj } = input;\n        return obj ? { name, value, obj } : { name, value };\n      }),\n    );\n\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      \"X-Turnstile-Token\": turnstileToken,\n    };\n\n    const source =\n      window.location.origin.replace(/^https?:\\/\\//, \"\") +\n      window.location.pathname.replace(/\\/$/, \"\");\n\n    if (!turnstileToken) return false;\n\n    try {\n      const completed = isSubmissionComplete(submission, requiredFields);\n\n      if (formSubmissionId) {\n        await fetch(\n          `${LOCALIZED.API_URL}/submit-lead-form/${formSubmissionId}`,\n          {\n            method: \"PUT\",\n            headers,\n            body: JSON.stringify({ submission, source, completed }),\n          },\n        );\n      } else {\n        if (!formStarted) {\n          setFormStarted(true);\n          if (window?.dataLayer) {\n            window.dataLayer.push({\n              event: \"form_start\",\n            });\n          }\n        }\n\n        const response = await fetch(`${LOCALIZED.API_URL}/submit-lead-form`, {\n          method: \"POST\",\n          headers,\n          body: JSON.stringify({ submission, source, completed }),\n        });\n\n        const result = await response.json();\n        if (result?.id) {\n          setFormSubmissionId(result?.id);\n        }\n      }\n\n      if (submit) {\n        setSubmitted(true);\n      }\n    } catch (error) {\n      console.error(\"There was an error\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTextChange = ({ input, event }) => {\n    input.value = event?.target?.value;\n  };\n\n  const handleDateChange = ({ input, event }) => {\n    input.value = event;\n    setSelectedDate(event);\n  };\n\n  const handleBlur = (submit = false) => {\n    if (validPhoneNumber && turnstileToken) {\n      void handleSubmit(submit);\n    } else {\n      return false;\n    }\n  };\n\n  const handleConsentChange = ({ input, event }) => {\n    const { checked } = event?.target;\n    input.value = checked;\n    setChecked(checked);\n    handleBlur();\n  };\n\n  return (\n    <section>\n      <Card className=\"phoenix-form\">\n        {LOCALIZED.FORM_TITLE && (\n          <CardHeader\n            title={LOCALIZED.FORM_TITLE}\n            subheader={LOCALIZED.FORM_SUBTITLE}\n          />\n        )}\n        {submitted && (\n          <CardContent>\n            <Stack space={2}>\n              <Prompt\n                question={{\n                  prompt: LOCALIZED.SUBMISSION_MESSAGE,\n                }}\n              />\n            </Stack>\n          </CardContent>\n        )}\n\n        {!submitted && (\n          <form aria-label=\"Form Description\" autoComplete=\"on\" noValidate>\n            <CardContent>\n              <Stack space={4}>\n                {questions?.map((question, index) => {\n                  if (question.type === \"row\") {\n                    return (\n                      <>\n                        <Typography\n                          variant=\"subtitle1\"\n                          sx={{ mt: \"1rem\" }}\n                          color=\"textSecondary\"\n                        >\n                          {question.title}\n                          <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                            {question.label}\n                          </Typography>\n                        </Typography>\n\n                        <Box\n                          key={index}\n                          display=\"flex\"\n                          flexDirection=\"row\"\n                          sx={{ width: \"100%\" }}\n                          gap={2}\n                        >\n                          {question.inputs.map((input, index) => (\n                            <InputField\n                              key={index}\n                              input={input}\n                              handleTextChange={handleTextChange}\n                              handleDateChange={handleDateChange}\n                              handleConsentChange={handleConsentChange}\n                              selectedDate={selectedDate}\n                              setValidPhoneNumber={setValidPhoneNumber}\n                              checked={checked}\n                              setChecked={setChecked}\n                              handleBlur={handleBlur}\n                            />\n                          ))}\n                        </Box>\n                      </>\n                    );\n                  } else {\n                    return question.inputs.map((input, index) => (\n                      <InputField\n                        key={index}\n                        input={input}\n                        handleTextChange={handleTextChange}\n                        handleDateChange={handleDateChange}\n                        handleConsentChange={handleConsentChange}\n                        selectedDate={selectedDate}\n                        setValidPhoneNumber={setValidPhoneNumber}\n                        checked={checked}\n                        setChecked={setChecked}\n                        handleBlur={handleBlur}\n                      />\n                    ));\n                  }\n                })}\n              </Stack>\n              <Box>\n                <Disclaimer index={0} />\n              </Box>\n              <div\n                id=\"turnstile-widget\"\n                className=\"cf-turnstile\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  margin: \"1rem 0\",\n                  padding: \"1rem\",\n                }}\n                data-sitekey={LOCALIZED.TURNSTILE_SITE_KEY}\n              ></div>\n              <>{loading && <LinearProgress />}</>\n            </CardContent>\n\n            <CardActions sx={{ justifyContent: \"end\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => {\n                  void handleBlur(true);\n                }}\n                disabled={loading || !validPhoneNumber || !turnstileToken}\n              >\n                Submit\n              </Button>\n            </CardActions>\n          </form>\n        )}\n      </Card>\n    </section>\n  );\n}\n"],"names":["getCardActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionsRoot","styled","name","overridesResolver","props","styles","ownerState","root","disableSpacing","spacing","display","alignItems","padding","marginLeft","inProps","ref","className","other","classes","slots","composeClasses","useUtilityClasses","clsx","type","title","label","inputs","value","optional","selected","obj","valueId","optionsKey","options","requiredFields","isSubmissionComplete","submission","every","field","validateField","fieldData","find","item","validationRules","full_name","trim","phone","service_time","isNaN","Date","getTime","location","service_type","Array","isArray","length","Prompt","lazy","InputField","Disclaimer","EmbedForm","questions","useState","questionData","validPhoneNumber","setValidPhoneNumber","loading","setLoading","submitted","setSubmitted","formStarted","setFormStarted","formSubmissionId","setFormSubmissionId","selectedDate","setSelectedDate","checked","setChecked","turnstileToken","setTurnstileToken","useEffect","window","turnstile","id","render","sitekey","LOCALIZED","TURNSTILE_SITE_KEY","callback","token","expired-callback","reset","handleTextChange","input","event","target","handleDateChange","handleBlur","submit","async","flatMap","question","map","headers","source","origin","replace","pathname","completed","fetch","API_URL","method","body","JSON","stringify","dataLayer","push","response","result","json","error","console","handleSubmit","handleConsentChange","React","Card","FORM_TITLE","CardHeader","subheader","FORM_SUBTITLE","CardContent","Stack","space","prompt","SUBMISSION_MESSAGE","autoComplete","noValidate","index","Typography","variant","sx","mt","color","Box","key","flexDirection","width","gap","style","justifyContent","margin","LinearProgress","CardActions","Button","onClick","disabled"],"sourceRoot":""}